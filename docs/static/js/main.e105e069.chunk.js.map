{"version":3,"sources":["components/AddCategory.js","helpers/GetGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","c","type","value","onChange","event","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","console","log","useFetchGifs","GifExpertApp","categories","element","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAIzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAkBA,OACI,sBAAMC,SAbW,SAACC,GAClBA,EAAEC,iBAGCJ,EAAWK,OAAOC,OAAQ,IAEzBR,GAAc,SAAAS,GAAC,OAAGP,GAAH,mBAAkBO,OACjCN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,MAAST,EACTU,SArBc,SAACC,GACvBV,EAAcU,EAAMC,OAAOH,a,+BCXtBI,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAGbC,EAHa,iDAGmCC,UAAUH,GAH7C,yFAIAI,MAAMF,GAJN,cAIbG,EAJa,gBAKEA,EAAKC,OALP,uBAKZC,EALY,EAKZA,KAIDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAbvB,kBAkBZM,GAlBY,4CAAH,sDCMPO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEpC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCNHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAQrB,ECRwB,SAACA,GACzB,MAA0Bf,mBAAS,CAC/BsB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAoCA,OAbAC,qBAAU,WACNxB,EAAQC,GAAUwB,MAAK,SAAAC,GAEfC,QAAQC,IAAIF,GACZH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAKtB,CAACpB,IAEGqB,ED7ByBO,CAAa5B,GAAhCa,EAAb,EAAON,KAAca,EAArB,EAAqBA,QAErB,OAEI,qCACI,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAEjDoB,GAAW,mBAAGJ,UAAU,mCAAb,2BACb,qBAAKA,UAAU,YAAf,SAGYH,EAAOJ,KAAI,SAAAC,GAIP,OACI,cAAC,EAAD,eAEIA,GAFcA,EAAIC,aEiCvCkB,EA1DM,WAQjB,MAAoC5C,mBAAS,CACzC,cADJ,mBAAO6C,EAAP,KAAmB9C,EAAnB,KAuBA,OACI,qCACI,8CAGA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAIA,6BAUI8C,EAAWrB,KAAI,SAACsB,EAASpB,GAAV,OAAiB,cAAC,EAAD,CAAuBX,SAAU+B,GAAnBA,Y,MClD9DC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.e105e069.chunk.js","sourcesContent":["import React from 'react'\nimport { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({setCategories}) => {\n\n\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (event) => {\n        setInputValue(event.target.value);\n    }\n\n    const handleSubmit = (e)=>{\n        e.preventDefault();\n\n        // validacion de inputvalue\n        if(inputValue.trim().length >2){\n            // llamar con el callback del estado anterior\n            setCategories(c=>[inputValue, ...c ]);\n            setInputValue('');\n        }\n        // this.props.setCategories(e.target.value);\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input \n                type=\"text\" \n                value = {inputValue}\n                onChange = {handleInputChange}\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","export const getGifs = async (category) => {\n\n        \n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&offset=0&rating=g&lang=en&api_key=8O1cAR9ZSUCqDDKLJB8i0UOs3NfVnfnp`;\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n\n    // console.log(data);\n\n    const gifs = data.map(img => {\n        return{\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    });\n\n    // console.log(gifs);\n    return gifs;\n}","import React from 'react'\n\n// var count = 0;\n// export const GifGridItem = (props) => {\n    // count++;\n    // console.log(count);\nexport const GifGridItem = ({id, title, url}) => {\n    // console.log(id, title, url);\n    return (\n        <div className='card animate__animated animate__bounce'>\n            <img src={url} alt={title}/>\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React/*,{ useState, useEffect }*/ from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\n// import { getGifs } from '../helpers/GetGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({category}) => {\n\n    // const [images, setImages] = useState([]);\n\n\n    \n    // enviar category como prop\n    // alias: images para propiedad data\n    const {data: images, loading} = useFetchGifs(category);\n    // console.log(state);\n    return (\n\n        <>\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n\n            { loading && <p className=\"animate__animated animate__flash\">'Cargando...'</p>}\n            <div className='card-grid'>\n                {/* <ol> */}\n                    {\n                        images.map(img =>{\n                        // desestructurar el objeto img\n                        // images.map(({id, title, url}) =>{\n\n                            return(\n                                <GifGridItem key={img.id} \n                                // \n                                {...img}\n                                />\n                            );\n                        })\n                    }\n                {/* </ol> */}\n            </div>\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/GetGifs\";\n\n\n// \nexport const useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    // // recibe una funcion y una lista de dependencias\n    // // si la lista es vacia useEffect solo se lanza una vez\n    // // similar a componentDidMount() de las clases\n    // useEffect(()=>{\n    //     // getGifs(category).then(imgs=>setImages(imgs));\n\n    //     // se puede hacer referencia al metodo sin parentesis\n    //     // si solo recibe el parametro que devuelve el callback\n    //     getGifs(category).then(setImages);\n    // /**\n    //  * Para este error\n    //  *   Line 18:8:  React Hook useEffect has a missing dependency: 'category'. Either include it or remove the dependency array  react-hooks/exhaustive-deps\n    //  * se debe agregar la categoria, ya que si la categoria cambia\n    //  * deberÃ¡ ejecutarse nuevamente\n    //  */\n    // }, [category]);\n\n    // useEffect no puede ser async\n    useEffect(()=>{\n        getGifs(category).then(imgs => {\n            // setTimeout(() => {\n                console.log(imgs);\n                setState({\n                    data: imgs,\n                    loading: false\n                });\n            // }, 2300);\n        });\n       \n    }, [category]);\n\n    return state;\n}","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = ()=>{\n\n    // const categories = [\n    //     'One Punch',\n    //     'Samurai X',\n    //     'Dragon Ball'\n    // ];\n\n    const [categories, setCategories] = useState([\n        'One Punch',\n        // 'Samurai X',\n        // 'Dragon Ball'\n    ]);\n\n    // const handleAdd = () => {\n\n    //     // categories.push('HunterXHunter');\n\n    //     // soluciones para agregar elementos a un arreglo\n    //     // 1. agregar un nuevo elemento con operador spread\n    //     // setCategories(['HunterXHunter', ...categories]);\n\n    //     // 2. hacer lo mismo dentro del callback \n    //     setCategories(categories=>\n    //         [...categories, 'HunterXHunter']\n    //     );\n\n    // };\n\n\n\n    return(\n        <>\n            <h2>GifExpertApp</h2>\n\n            {/* pasar referencia de setcategories como prop al componente */}\n            <AddCategory setCategories={setCategories}/>\n            <hr/>\n\n\n            {/* <button onClick={handleAdd}>Agregar</button> */}\n            <ol>\n            {\n                // categories.map((element, i) =>{\n                //     return(\n\n                //         <GifGrid category={element}/>\n                //     );\n                // })\n\n                // simplificado\n                categories.map((element, id) =>(<GifGrid key={element} category={element}/>))\n            }\n            </ol>\n        </>\n    );\n}\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}